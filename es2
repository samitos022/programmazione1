#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

//crea albero, inserisci elementi nell'albero, occhio a MAXVALUE e MAXSIZE

#define MAXVALUE 100
#define MAXSIZE 100

// NON MODIFICARE IL CODICE SOTTO FINO A "NON MODIFICARE IL CODICE SOPRA"
struct list {
  int info;
  list * next;
};

struct tree {
  int info;
  tree * left;
  tree * right;
};

void insert(tree * & result, const int num) {
		if (result == NULL) {
				result = new tree;
				*result = {num, NULL, NULL};
		} else if (result->info > num) {
				insert(result->left, num);
		} else {
				insert(result->right, num);
		}
}

tree * crea_tree(const int num) {
		tree * result = NULL;
		for(int i = 0; i < num; i++) {
				insert(result, rand()%MAXVALUE);
		}
		return result;
}

void print_tree(const tree * root){
		if (root != NULL) {
				print_tree(root->right);
				cout << " " << root->info;
				print_tree(root->left);
  }
}

void delete_tree(tree * & root) {
  if (root != NULL) {
    delete_tree(root->left);
    delete_tree(root->right);
    delete root;
    root = NULL;
  }
}

void delete_list(list * &l) {
  if (l != NULL) {
    delete_list(l->next);
    delete l;
    l = NULL;
  }
}

void print_list(const list * l) {
  if (l != NULL) {
    cout << " " << l->info;
    print_list(l->next);
  }
  else
    cout << endl;
}

// NON MODIFICARE IL CODICE SOPRA


// Add hereafter the declaration of estrai
void estrai(const tree * albero, list * &n1, list * &n2);
// Add here above the declaration of estrai

int main(int argc, char ** argv) {
  // NON MODIFICARE IL MAIN
  srand(unsigned(time(0)));
		//
		// Commentare la linea seguente per avere comportamento
		// non-deterministico
		//
		srand(0);
		tree * root = crea_tree(rand()%MAXSIZE);
		cout << "Initial tree content: ";
		print_tree(root); cout << endl;
  list * l1;
  list * l2;
  estrai(root, l1, l2);
  delete_tree(root);
		cout << "L1 =";
  print_list(l1);
		cout << "L2 =";
  print_list(l2);
  delete_list(l1);
  delete_list(l2);
  // NON MODIFICARE IL MAIN
}

// Add hereafter the definition of estrai

list * estrai_3(const tree * albero, list * numeri){
    if(albero == NULL){
      return numeri;
    }else{
      
      numeri = estrai_3(albero->right, numeri);
      if(albero->info % 3 == 0){
        numeri = new list{albero->info, numeri};
      }
      numeri = estrai_3(albero->left, numeri);

      return numeri;
    }
}

list * estrai_aux(const tree * albero, list * numeri){
    if(albero == NULL){
      return numeri;
    }else{
      numeri = estrai_aux(albero->right, numeri);
      if(albero->info % 3 != 0){
        numeri = new list{albero->info, numeri};
      }
      numeri = estrai_aux(albero->left, numeri);

      return numeri;
    }
}



void estrai(const tree * albero, list * &n1, list * &n2){
    n1 = NULL;
    n2 = NULL;
    if(albero == NULL){
      cout << "Errore: albero vuoto" <<endl;
    }
    n1 = estrai_3(albero, n1);
    n2 = estrai_aux(albero, n2);
    if(n1 == NULL){
      cout << "Errore: non ci sono numeri multipli di 3" <<endl;
    }
    if(n2 == NULL){
      cout << "Errore: non ci sono numeri che non sono multipli di 3" <<endl;
    }
}
// Add here above the definition of estrai
